import streamlit as st
# Importa a fun√ß√£o principal da sua l√≥gica CrewAI e o modelo de sa√≠da
from src.crew_factory import create_crew, ArticleOutput 

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Gerador de Artigos CrewAI", layout="wide")

# --- T√≠tulo e Descri√ß√£o ---
st.title("ü§ñ Gerador de Artigos com CrewAI e Wikipedia")
st.markdown("""
    Digite um t√≥pico abaixo e clique em 'Gerar Artigo'. 
    A intelig√™ncia artificial ir√° pesquisar na Wikipedia e escrever um artigo sobre o tema.
""")

# --- Input do Usu√°rio ---
topic = st.text_input("Qual o t√≥pico do artigo?", placeholder="Ex: Intelig√™ncia Artificial no Brasil")

# --- Bot√£o de A√ß√£o ---
if st.button("Gerar Artigo", type="primary"):
    # Verifica se o usu√°rio digitou um t√≥pico
    if topic:
        # Mostra uma mensagem de "carregando" enquanto a Crew trabalha
        with st.spinner(f"Pesquisando e escrevendo sobre '{topic}'... Por favor, aguarde, isso pode levar um minuto ou mais."):
            try:
                # Chama a fun√ß√£o principal da sua CrewAI
                # Especificamos o tipo de retorno esperado
                crew_result = create_crew(topic) 
                
                # Extrai o resultado Pydantic (se existir)
                if crew_result and hasattr(crew_result, 'pydantic') and crew_result.pydantic:
                    article: ArticleOutput = crew_result.pydantic
                    
                    # --- Exibe o Resultado ---
                    st.divider() # Linha divis√≥ria
                    st.subheader(f"üìÑ Artigo Gerado: {article.title}")
                    
                    if article.source_title:
                         st.caption(f"Fonte principal da Wikipedia: {article.source_title}") # Mostra o t√≠tulo da fonte
                    
                    st.markdown("### Introdu√ß√£o")
                    st.write(article.introduction)
                    
                    st.markdown("### Desenvolvimento")
                    st.write(article.body) # st.write lida bem com quebras de linha (\n)
                    
                    st.markdown("### Conclus√£o")
                    st.write(article.conclusion)
                    
                    st.divider() 
                    st.success(f"Artigo gerado com sucesso! ({article.word_count} palavras)")

                else:
                    # Se o resultado n√£o tiver o .pydantic esperado (caso raro)
                    st.error("A CrewAI finalizou, mas n√£o retornou o artigo no formato esperado.")
                    st.write("Resultado bruto recebido:")
                    st.write(crew_result) # Mostra o resultado bruto para debug

            # Captura erros espec√≠ficos ou gerais durante a execu√ß√£o da Crew
            except ValueError as ve: # Captura o erro da API Key n√£o encontrada
                 st.error(f"Erro de Configura√ß√£o: {ve}")
            except Exception as e:
                # Captura outros erros (como 503 da API, erros na ferramenta, etc.)
                st.error(f"Ocorreu um erro durante a gera√ß√£o do artigo:")
                st.exception(e) # Mostra o traceback do erro de forma formatada

    else:
        # Se o usu√°rio clicar no bot√£o sem digitar um t√≥pico
        st.warning("Por favor, digite um t√≥pico antes de gerar o artigo.")

# --- Rodap√© (Opcional) ---
st.sidebar.info("Desenvolvido por Andresantoss")
st.sidebar.markdown("GitHub: [Reposit√≥rio do Projeto](https://github.com/andresantoss/Sistema-Multiagentes-Geracao-de-Artigos-Utilizando-CrewAI-Andresantoss)")